<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>sys - 分类 - pokpok的研究日志</title>
        <link>/categories/sys/</link>
        <description>sys - 分类 - pokpok的研究日志</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 30 Apr 2021 13:09:26 &#43;0800</lastBuildDate><atom:link href="/categories/sys/" rel="self" type="application/rss+xml" /><item>
    <title>google benchmark 的初体验</title>
    <link>/google-benchmark/</link>
    <pubDate>Fri, 30 Apr 2021 13:09:26 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/google-benchmark/</guid>
    <description><![CDATA[前言准确的度量系统的开销是很重要的, 系统级别比较出名的是 Latency Numbers Every Programmer Should Know, 而在各种变成语言中, 需要依赖基准测试来判断程序实际的耗时。 Latency Comparison Numbers (~2012) ---------------------------------- L1 cache]]></description>
</item><item>
    <title>利用Jemalloc进行内存泄漏的调试</title>
    <link>/%E5%88%A9%E7%94%A8jemalloc%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E8%B0%83%E8%AF%95/</link>
    <pubDate>Fri, 18 Dec 2020 22:56:03 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/%E5%88%A9%E7%94%A8jemalloc%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E8%B0%83%E8%AF%95/</guid>
    <description><![CDATA[内存不符预期的不断上涨，可能的原因是内存泄漏，例如new出来的对象未进行delete就重新进行复制，使得之前分配的内存块被悬空，应用程序没办]]></description>
</item><item>
    <title>gRPC：复用CompletionQueue</title>
    <link>/%E5%8D%95%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7%E5%A4%9A%E4%B8%AArpc%E8%AF%B7%E6%B1%82/</link>
    <pubDate>Mon, 19 Oct 2020 22:56:03 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/%E5%8D%95%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%A6%82%E4%BD%95%E5%8F%91%E8%B5%B7%E5%A4%9A%E4%B8%AArpc%E8%AF%B7%E6%B1%82/</guid>
    <description><![CDATA[异步请求过程在利用异步gRPC实现请求的时候，通常使用gRPC example中的greeter_async_client2.cc作为模板发起]]></description>
</item><item>
    <title>如何进行调试以及性能剖析</title>
    <link>/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</link>
    <pubDate>Fri, 20 Mar 2020 16:01:24 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</guid>
    <description><![CDATA[“The most effective debugging tool is still careful thought, coupled with judiciously placed print statements” — Brian Kernighan, Unix for Beginners. 最朴素的debug方法还是使用print，并且在合适的地方插入print]]></description>
</item><item>
    <title>Golang原生RPC与gPRC</title>
    <link>/rpc-and-grpc/</link>
    <pubDate>Wed, 26 Feb 2020 22:19:35 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/rpc-and-grpc/</guid>
    <description><![CDATA[前言因为前段时间把6.824的lab3做完了，但是lab内部是用channel mock了一个简单的网络来测试网络丢包，网络分区等问题，也就是]]></description>
</item><item>
    <title>6.824 Lab3 Fault-tolerant Key/Value Service</title>
    <link>/kv-server/</link>
    <pubDate>Wed, 12 Feb 2020 10:42:40 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/kv-server/</guid>
    <description><![CDATA[强一致性Key/Value服务其实在写完Raft后，K/V的接口已经比较明显了，只需要将操作写入Raft entry的Command内，然后等]]></description>
</item><item>
    <title>Protection Mechanism on 80386</title>
    <link>/protection/</link>
    <pubDate>Mon, 11 Nov 2019 12:34:17 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/protection/</guid>
    <description><![CDATA[80386 下的保护模式划为5个部分： 类型检查 界限检查 可寻址域的限制 过程调用的限制 指令集的限制 事实上按照段页机制又需要分为段机制下的保护和页机制下的保]]></description>
</item><item>
    <title>6.824 Notes：MapReduce、GFS、Raft</title>
    <link>/6.824-notesmapreducegfsraft/</link>
    <pubDate>Tue, 15 Jan 2019 15:49:46 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/6.824-notesmapreducegfsraft/</guid>
    <description><![CDATA[最近这段时间有一些空闲时间，可以开始做下6.824，目前是Spring 2018，最新的2019也快出了，提前刷下notes和paper。 分布]]></description>
</item><item>
    <title>Effective Go</title>
    <link>/effective-go/</link>
    <pubDate>Thu, 10 Jan 2019 12:48:14 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/effective-go/</guid>
    <description><![CDATA[goroutine部分goroutine的一些tricks，比如 func Announce(message string, delay time.Duration) { go func() { time.Sleep(delay) fmt.Println(message) }() // 注意括号 - 必须调用该函数。 } 直接在go关键字后面接]]></description>
</item><item>
    <title>线程同步</title>
    <link>/thread-synchronization/</link>
    <pubDate>Mon, 15 Oct 2018 08:36:39 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/thread-synchronization/</guid>
    <description><![CDATA[这篇文章是针对APUE习题11-2的writeup，进程在开启线程后，不同线程需要完成不同的工作，然后在运行中可能引用同一个元素，举一个例子]]></description>
</item></channel>
</rss>
