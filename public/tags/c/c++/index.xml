<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>c/c&#43;&#43; - 标签 - pokpok的研究日志</title>
        <link>/tags/c/c&#43;&#43;/</link>
        <description>c/c&#43;&#43; - 标签 - pokpok的研究日志</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><atom:link href="/tags/c/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>apue-file and directory</title>
    <link>/apue-file-and-directory/</link>
    <pubDate>Tue, 14 Aug 2018 10:42:10 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/apue-file-and-directory/</guid>
    <description><![CDATA[文件类型stat函数簇(fstat,lstat, lstat, fstatat)是用来获取文件状态的函数，需要提前定义一个结构体struct stat来获取]]></description>
</item><item>
    <title>apue-file I/O</title>
    <link>/apue-chapter3/</link>
    <pubDate>Sat, 11 Aug 2018 20:02:09 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/apue-chapter3/</guid>
    <description><![CDATA[写在前面的话暑期撸了一阵子算法导论，在红黑树的删除操作卡主了，暂时放下算法，稍微看看别的计算机知识，APUE是一本关于Linux下C语言AP]]></description>
</item><item>
    <title>static,extern关键词和函数指针数组</title>
    <link>/static-extern%E5%85%B3%E9%94%AE%E8%AF%8D%E5%92%8C%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/</link>
    <pubDate>Thu, 19 Apr 2018 23:49:06 &#43;0000</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/static-extern%E5%85%B3%E9%94%AE%E8%AF%8D%E5%92%8C%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E6%95%B0%E7%BB%84/</guid>
    <description><![CDATA[extern从该文件外部获取变量定义，在文件域默认有extern属性。存储属性为static，也就是在文件执行前就被放在静态数据区。 stat]]></description>
</item><item>
    <title>C&#43;&#43; iterater</title>
    <link>/c-/</link>
    <pubDate>Fri, 02 Jun 2017 11:15:08 &#43;0800</pubDate><author>
        <name>北极乌布</name>
    </author><guid>/c-/</guid>
    <description><![CDATA[There have serveral methods: /***overload function****/ void print(int* pi) { if (pi) cout &lt;&lt; *pi &lt;&lt; endl; } void print(const char* p) { if (p) while (*p) cout &lt;&lt; *p++; cout &lt;&lt; endl; } void print(const int* beg, const int* end) { while (beg != end) cout &lt;&lt; *beg++ &lt;&lt; endl; } void print(const int ia[], size_t size) { for (size_t i = 0; i != size; ++i) { cout &lt;&lt; ia[i] &lt;&lt; endl; } } void print(const int(&amp;arr)[2]) { for (auto i : arr) cout &lt;&lt; i &lt;&lt; endl; } int main() { int i = 0, j[2] = {0, 1}; char ch[5] = &#34;Getup!]]></description>
</item></channel>
</rss>
